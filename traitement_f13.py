# -*- coding: utf-8 -*-
"""traitement_F13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UtCsHX1DgMs_N7PZFavFuJSpyNKFQ6NJ
"""

import pandas as pd
from openpyxl import load_workbook
from openpyxl import Workbook
from openpyxl.utils import get_column_letter

# 1. Charger le fichier et les données
fichier_source = "Business unit Groupe 2.xlsx"
fichier_causes = "GR2.xlsx"

données = pd.read_excel(fichier_source, sheet_name="COMMENTAIRES", skiprows=2)
causes = pd.read_excel(fichier_causes, sheet_name="Sheet1")

# change le nom des colonnes
données = données.rename(columns={"05_Date Heure Début" : "Date Heure Début", "09_Cause MatUnitaire" : "Cause MatUnitaire", "07_CodeOAQ10" : "Code", "70_Commentaires" : "Commentaires","20_Durée (mn)" : "Durée (mn)" })

# filtre pour avoir que du F13
données = données[données['Code'].isin(['F13A', 'F13B', 'F13C'])]

'''
#TEST
print("Exemples de valeurs dans 'Code' :")
print(données['Code'].dropna().head(10).tolist())

print("Colonnes actuelles :", données.columns.tolist())
'''

données['Cause MatUnitaire'] = données['Cause MatUnitaire'].astype(str) # Vérifie que la colonne 'Code' est bien du texte
causes['Cause'] = causes['Cause'].astype(str)

# 2. Créer un nouveau fichier Excel vide
wb = Workbook()

# 3. Enregistrer le fichier vide
wb.save("Impact_F13_01-07_2025test.xlsx")

fichier_final = "Impact_F13_01-07_2025test.xlsx"

données['Durée (mn)'] = données['Durée (mn)'].round(0)
données['Durée (mn)'] = données['Durée (mn)'].astype(int)

# 4. Ecrit une nouvelle feuille avec toutes les données du fichier source
with pd.ExcelWriter(fichier_final, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
    données.to_excel(writer, sheet_name='Sheet', index=False)

'''
#TEST
print(données['Durée (mn)'].dropna().head(30).tolist())
'''

#Change le nom de le feuille
wb = load_workbook(fichier_final)
ws = wb['Sheet']
ws.title = 'Données'
wb.save(fichier_final)

# 5. Fonctions d'extraction
def extraire_machine(code):
  if code != "-" :
    dico = str(code).split('.')
    if len(dico)>1 :
      if dico[0] == "ZA":
          return dico[0]
      else :
          return dico[2]
    else :
      return None
  else :
    return None

def extraire_sous_code(code):
  if code != "-" :
    dico = str(code).split('.')
    if len(dico)>2 :
      if dico[2] != "00" :
        if dico[0] == "ZA":
          return dico[0]
        else :
          return dico[3]
      else :
        return None
    else :
      return None
  else :
    return None

def extraire_cause(code):
  dico = str(code).split('.')
  if len(dico)>1 :
    if dico[0] == "ZA":
      return "Non renseigné"
    else :
      if dico[2] != "00" :
        return f"{dico[2]}.{dico[3]}"
      else :
        return None
  else :
    return None

# 6. Appliquer les fonctions
données['Machine'] = données['Cause MatUnitaire'].apply(extraire_machine)

données['Sous-code'] = données['Cause MatUnitaire'].apply(extraire_sous_code)

causes['Causes'] = causes['Cause'].apply(extraire_cause)
données['Causes'] = données['Cause MatUnitaire'].apply(extraire_cause)

données = données[données['Machine'].notna() & données['Sous-code'].notna() & données['Causes'].notna()] #efface les none
causes = causes[causes['Causes'].notna()]

données = données.merge(causes[['Causes', 'Description']], on='Causes', how='left')
données['Description'] = données['Description'].fillna("Non renseigné") #remplis la colonne "description" des machines non-renseignées dans "GR2"

'''
#TEST
print("Aperçu des données avec 'Machine' et 'Sous-code' :")
print(données[['Code', 'Machine', 'Sous-code']].head(10))
'''

# --- 7. Calculer le total de durée d'arrêt par machine ---
durée_tot = données.groupby('Machine')['Durée (mn)'].sum().reset_index()

# --- 8. Trier les machines par temps d'arrêt décroissant ---
durée_tot = durée_tot.sort_values(by='Durée (mn)', ascending=False)
durée_tot['Durée (mn)'] = durée_tot['Durée (mn)'].round(0)  # Ajout de l'arrondi ici
durée_tot['Durée (mn)'] = durée_tot['Durée (mn)'].astype(int)

# --- 9. Ouvrir le classeur Excel existant pour ajouter une feuille ---
book = load_workbook(fichier_final)

# --- 10. Écriture du tableau résumé dans une nouvelle feuille (ou remplacement si elle existe déjà) ---
with pd.ExcelWriter(fichier_final, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
    durée_tot.to_excel(writer, sheet_name='Machines', index=False)

print("✅ Le tableau résumé a été ajouté dans la feuille 'Machines'.")

# 11. Créer le dictionnaire {machine: DataFrame filtré}
dico_machines = {}
for machine in données['Machine'].unique():
    dico_machines[machine] = données[données['Machine'] == machine]

'''
print(dico_machines)
'''

classement = pd.read_excel(fichier_final, sheet_name="Machines") # feuille
machines_triées = classement['Machine'].tolist()  # liste triée des machines (colonne)

# 12. Charger le workbook Excel existant
book = load_workbook(fichier_final)

# 13. Écrire chaque tableau résumé dans une feuille
with pd.ExcelWriter(fichier_final, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
    for clé_machine in machines_triées: #clé_machine : clé du dico, val_machine : tableau associé

      if clé_machine == "00" :
        continue

      val_machine = dico_machines.get(clé_machine)

      résumé = val_machine.groupby(['Sous-code', 'Description'])['Durée (mn)'].sum().reset_index()
      résumé = résumé.rename(columns={'Durée (mn)': 'Durée totale (mn)'})
      résumé = résumé.sort_values(by='Durée totale (mn)', ascending=False)
      résumé['Durée totale (mn)'] = résumé['Durée totale (mn)'].round(0)
      résumé['Durée totale (mn)'] = résumé['Durée totale (mn)'].astype(int)

      nom_feuille = clé_machine
      résumé.to_excel(writer, sheet_name=nom_feuille, index=False)

print("✅ Fichier mis à jour avec un onglet par machine.")

'''
#TEST
print("Machines triées :", machines_triées)
print("Clés du dico_machines :", list(dico_machines.keys()))
'''

# 14. Réouvrir le fichier Excel pour ajuster les colonnes
wb = load_workbook(fichier_final)

for ws in wb.worksheets:
    for col in ws.columns:
        max_length = 0
        col_letter = get_column_letter(col[0].column)
        for cell in col:
            try:
                if cell.value:
                    max_length = max(max_length, len(str(cell.value)))
            except:
                pass
        adjusted_width = max_length + 2  # marge de sécurité
        ws.column_dimensions[col_letter].width = adjusted_width

# 15. Sauvegarder le fichier avec les colonnes ajustées
wb.save(fichier_final)

print("✅ Fichier mis à jour largeur de colonnes ajustées.")