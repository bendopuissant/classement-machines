# -*- coding: utf-8 -*-
"""traitement_F13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IqOMQKcoDaeA_cGfbGdrBf9yt0q8kO-I
"""

def code_traitement_F13(file_data):
    import pandas as pd
    from openpyxl import Workbook
    from openpyxl.utils import get_column_letter
    from io import BytesIO

    # 1. Chargement des données
    données = pd.read_excel(file_data, sheet_name="COMMENTAIRES", skiprows=2)
    causes = pd.read_excel("GR2.xlsx", sheet_name="Sheet1")

    données = données.rename(columns={
        "05_Date Heure Début": "Date Heure Début",
        "09_Cause MatUnitaire": "Cause MatUnitaire",
        "07_CodeOAQ10": "Code",
        "70_Commentaires": "Commentaires",
        "20_Durée (mn)": "Durée (mn)"
    })

    données = données[données['Code'].isin(['F13A', 'F13B', 'F13C'])]
    données['Cause MatUnitaire'] = données['Cause MatUnitaire'].astype(str)
    causes['Cause'] = causes['Cause'].astype(str)
    données['Durée (mn)'] = données['Durée (mn)'].round(0).astype(int)

    # Fonctions d’extraction
    def extraire_machine(code):
        if code != "-":
            dico = str(code).split('.')
            if len(dico) > 1:
                return dico[0] if dico[0] == "ZA" else dico[2]

    def extraire_sous_code(code):
        if code != "-":
            dico = str(code).split('.')
            if len(dico) > 2 and dico[2] != "00":
                return dico[0] if dico[0] == "ZA" else dico[3]

    def extraire_cause(code):
        dico = str(code).split('.')
        if len(dico) > 1:
            if dico[0] == "ZA":
                return "Non renseigné"
            if dico[2] != "00":
                return f"{dico[2]}.{dico[3]}"

    données['Machine'] = données['Cause MatUnitaire'].apply(extraire_machine)
    données['Sous-code'] = données['Cause MatUnitaire'].apply(extraire_sous_code)
    causes['Causes'] = causes['Cause'].apply(extraire_cause)
    données['Causes'] = données['Cause MatUnitaire'].apply(extraire_cause)

    données = données[données['Machine'].notna() & données['Sous-code'].notna() & données['Causes'].notna()]
    causes = causes[causes['Causes'].notna()]
    données = données.merge(causes[['Causes', 'Description']], on='Causes', how='left')
    données['Description'] = données['Description'].fillna("Non renseigné")

    # Résumé par machine
    durée_tot = données.groupby('Machine')['Durée (mn)'].sum().reset_index()
    durée_tot = durée_tot.sort_values(by='Durée (mn)', ascending=False)
    durée_tot['Durée (mn)'] = durée_tot['Durée (mn)'].round(0).astype(int)

    dico_machines = {machine: données[données['Machine'] == machine] for machine in données['Machine'].unique()}
    machines_triées = durée_tot['Machine'].tolist()

    # Création du fichier en mémoire
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        données.to_excel(writer, sheet_name="Données", index=False)
        durée_tot.to_excel(writer, sheet_name="Machines", index=False)

        for clé_machine in machines_triées:
            if clé_machine == "00":
                continue
            val_machine = dico_machines.get(clé_machine)
            résumé = val_machine.groupby(['Sous-code', 'Description'])['Durée (mn)'].sum().reset_index()
            résumé = résumé.rename(columns={'Durée (mn)': 'Durée totale (mn)'})
            résumé = résumé.sort_values(by='Durée totale (mn)', ascending=False)
            résumé['Durée totale (mn)'] = résumé['Durée totale (mn)'].round(0).astype(int)
            résumé.to_excel(writer, sheet_name=clé_machine, index=False)

        # Création de la feuille avec classement des sous-codes
        classement_sous_codes = (
            données.groupby(['Sous-code', 'Description'])['Durée (mn)']
            .sum()
            .reset_index()
            .rename(columns={'Durée (mn)': 'Durée totale (mn)'})
            .sort_values(by='Durée totale (mn)', ascending=False)
        )
        classement_sous_codes['Durée totale (mn)'] = classement_sous_codes['Durée totale (mn)'].round(0).astype(int)

        classement_sous_codes.to_excel(writer, sheet_name="Classement Sous-codes", index=False)

        # Ajustement des colonnes
        workbook = writer.book
        for ws in workbook.worksheets:
            for col in ws.columns:
                max_length = 0
                col_letter = get_column_letter(col[0].column)
                for cell in col:
                    if cell.value:
                        max_length = max(max_length, len(str(cell.value)))
                ws.column_dimensions[col_letter].width = max_length + 2

    output.seek(0)
    return output